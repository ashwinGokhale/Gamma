"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.dumpDotfile=exports.getDotfile=exports.unpushed=exports.commitPending=exports.repoEmpty=exports.runCommand=exports.processContextRepo=exports.processContextBase=exports.listRepos=exports.listBases=exports.filter=exports.getBase=exports.getRepos=exports.findRepos=exports.dirs=exports.isChildOf=exports.dotpath=undefined;var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _expandTilde=require("expand-tilde");var _expandTilde2=_interopRequireDefault(_expandTilde);var _path=require("path");var _path2=_interopRequireDefault(_path);var _chalk=require("chalk");var _chalk2=_interopRequireDefault(_chalk);var _fs=require("fs");var _fs2=_interopRequireDefault(_fs);var _glob=require("glob");var _glob2=_interopRequireDefault(_glob);var _shelljs=require("shelljs");var _shelljs2=_interopRequireDefault(_shelljs);var _readline=require("readline");var _readline2=_interopRequireDefault(_readline);var _fuzzy=require("fuzzy");var _fuzzy2=_interopRequireDefault(_fuzzy);var _commands=require("./commands");var _child_process=require("child_process");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var dotpath=exports.dotpath=(0,_expandTilde2.default)("~/.gamma.json");var isChildOf=exports.isChildOf=function isChildOf(child,parent){return child!==parent&&parent.split("/").every(function(t,i){return child.split("/")[i]===t;});};var dirs=exports.dirs=function dirs(p){return _fs2.default.readdirSync((0,_expandTilde2.default)(p)).filter(function(f){return _fs2.default.statSync(_path2.default.join(p,f)).isDirectory()&&!f.startsWith(".");});};var findRepos=exports.findRepos=function findRepos(){var bases=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var dotfile=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var repo_names={};bases.forEach(function(base){base=_path2.default.resolve((0,_expandTilde2.default)(base));var repos={};repo_names[base]=[];_glob2.default.sync(base+"/**/.git",{dot:true}).forEach(function(repo_path){repo_path=repo_path.slice(0,-5);var repo_name=_path2.default.basename(repo_path);repos[repo_name]={base:base,path:repo_path};repo_names[base].push(repo_name);});dotfile["bases"][base]["repos"]=repos;});return[dotfile,repo_names];};var getRepos=exports.getRepos=function getRepos(){var bases=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var repos=[];var _getDotfile=getDotfile(),_getDotfile2=_slicedToArray(_getDotfile,1),dotfile=_getDotfile2[0];if(bases.length>0){bases.forEach(function(base){if(base in dotfile["bases"])repos=repos.concat(Object.keys(dotfile["bases"][base]["repos"]));else console.log(_chalk2.default.red(base+" is not a base"));});}else{for(var base in dotfile["bases"]){repos=repos.concat(Object.keys(dotfile["bases"][base]["repos"]));}}return repos;};var getBase=exports.getBase=function getBase(){var repo=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return Object.keys(getDotfile()[0]["bases"]).find(function(base){return isChildOf(repo,base);});};var filter=exports.filter=function filter(){var bases=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var tree={};var paths=[];bases.forEach(function(base){base=_path2.default.resolve((0,_expandTilde2.default)(base));if(!_fs2.default.existsSync(base)){console.log(_chalk2.default.red(base+" does not exist"));return;}var dirs=base.split(_path2.default.sep);for(var i=0;i<dirs.length;i++){if(tree[dirs[i]]){if(tree[dirs[i]]["marked"])break;}if(!tree[dirs[i]])tree[dirs[i]]={};if(i==dirs.length-1){tree[dirs[i]]={marked:true};paths.push(base);}}});return paths;};var listBases=exports.listBases=function listBases(dotfile){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=Object.keys(dotfile["bases"])[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var base=_step.value;if(!_fs2.default.existsSync(base)){(0,_commands.rebase)();break;}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}Object.keys(dotfile["bases"]).forEach(function(base){return console.log(base);});};var listRepos=exports.listRepos=function listRepos(){var bases=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];return getRepos(bases).forEach(function(base){return console.log(base);});};var processContextBase=exports.processContextBase=function processContextBase(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";var dotfile=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var result=_fuzzy2.default.filter(base,Object.keys(dotfile["bases"]));if(!result.length)return console.log(_chalk2.default.red("Could not match: "+base+" to an existing base"));dotfile["context"]["base"]=result[0].string;dotfile["context"]["repo"]={};return dumpDotfile(dotfile);};var processContextRepo=exports.processContextRepo=function processContextRepo(repo,dotfile){var contextBase=dotfile["context"]["base"];if(!contextBase)return console.log(_chalk2.default.red("Please set the context"));var repoKeys=Object.keys(dotfile["bases"][contextBase]["repos"]);var result=_fuzzy2.default.filter(repo,repoKeys);if(!result.length)return console.log(_chalk2.default.red("Could not match: "+repo+" to an existing repo in "+contextBase));dotfile["context"]["repo"]={name:result[0].string,path:dotfile["bases"][contextBase]["repos"][result[0].string]["path"]};return dumpDotfile(dotfile);};var runCommand=exports.runCommand=function runCommand(){var command=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";var dotfile=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};command=command.replace("git","").trim();var repo=dotfile["context"]["repo"];if(!Object.getOwnPropertyNames(repo).length){(0,_commands.rebase)();return console.log(_chalk2.default.red("Context repo is missing!"));}repo=repo["path"].replace(/ /g,"\\ ");command="git -C "+repo+" "+command;var code=_shelljs2.default.exec(command).code;if(code!==0)return console.log(_chalk2.default.red("Command: "+command+" failed!"));return code;};var repoEmpty=exports.repoEmpty=function repoEmpty(repo){try{var stdout=(0,_child_process.execSync)("git -C "+repo+" status").toString();if(stdout.includes("Initial commit"))return true;}catch(error){}return false;};var commitPending=exports.commitPending=function commitPending(repo){try{var stdout=(0,_child_process.execSync)("git -C "+repo+" status").toString();if(stdout.includes("Changes to be committed")||stdout.includes("Changes not staged for commit")||stdout.includes("Untracked files"))return true;}catch(error){}return false;};var unpushed=exports.unpushed=function unpushed(repo){try{var stdout=(0,_child_process.execSync)("git -C "+repo+" log --branches --not --remotes").toString();if(stdout.length>0)return true;}catch(error){}return false;};var getDotfile=exports.getDotfile=function getDotfile(){if(!_fs2.default.existsSync(dotpath)){console.log(_chalk2.default.red("Error removing bases: ~/.gamma.json has been corrupted. Rebuilding..."));var dotfile=init();console.log(_chalk2.default.green("~/.gamma.json has been rebuilt"));return[dotfile,true];}else return[require(dotpath),false];};var dumpDotfile=exports.dumpDotfile=function dumpDotfile(dotfile){_fs2.default.writeFile(dotpath,JSON.stringify(dotfile,null,""),"utf8",function(err){if(err){console.error(err);}});return dotfile;};